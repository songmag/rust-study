{"role": "user", "content": "## 테스트 케이스 작성 방법\n\n1. 주어진 소스 코드에서 작성 가능한 테스트 확인\n\nExample\n``` java\n@Entity\n@Getter\n@AllArgsConstructor(access = AccessLevel.PROTECTED)\n@NoArgsConstructor(access = AccessLevel.PROTECTED)\n@ToString\npublic class Receipt implements Persistable<String> {\n    @Id\n    private String receiptToken;\n    private String storeId;\n    @Enumerated(EnumType.STRING)\n    private ReceiptStatus receiptStatus;\n    private String receiptMonth;\n    @Enumerated(EnumType.STRING)\n    private TaxPayerType taxPayerType;\n    @Embedded\n    private ReceiptMoney receiptMoney;\n    @Enumerated(EnumType.STRING)\n    private StoreType storeType;\n    private BigDecimal withholdingTaxRatio;\n\n    @Transient\n    private boolean isNew;\n\n    @Builder\n    public Receipt(\n            String storeId,\n            StoreType storeType,\n            Currency currency,\n            String receiptMonth,\n            TaxPayerType taxPayerType,\n            BigDecimal withholdingTaxRatio\n    ) {\n        this.receiptToken = TokenGenerator.getObjectIdStringToken(TokenPrefix.RC);\n        this.storeId = storeId;\n        this.storeType = storeType;\n        this.receiptMoney = new ReceiptMoney(currency);\n        this.receiptMonth = receiptMonth;\n        this.taxPayerType = taxPayerType;\n        this.withholdingTaxRatio = withholdingTaxRatio;\n        this.receiptStatus = ReceiptStatus.WAITING;\n        this.isNew = true;\n    }\n\n    public void registerDisbursement(Money disbursementMoney) {\n        this.receiptMoney.registerDisbursement(disbursementMoney);\n    }\n\n    public void deductDisbursement(Money disbursementMoney) {\n        this.receiptMoney.deductDisbursement(disbursementMoney);\n    }\n\n    public void removeDisbursement(Money disbursementMoney) {\n        this.receiptMoney.removeDisbursement(disbursementMoney);\n    }\n\n    public boolean isEmpty() {\n        Money receiptMoney = this.receiptMoney.getReceiptMoney();\n        return receiptMoney.equals(Money.ofZero(receiptMoney));\n    }\n\n    public Currency getReceiptCurrency() {\n        return this.receiptMoney.getCurrency();\n    }\n\n    @Override\n    public String getId() {\n        return this.receiptToken;\n    }\n\n    @Override\n    public boolean isNew() {\n        return isNew;\n    }\n\n    public void clear() {\n        this.receiptMoney.clear();\n    }\n}\n```\n\nResult\n\n---\n\nReceipt Test Case:\n\\tReceipt를 생성할 수 있다.\n\\tReceipt의 Receipt Money 를 확인할 수 있다.\n\\tReceipt의 Disbursement Money 를 확인할 수 있다.\n\\tReceipt의 Money 를 초기화할 수 있다.\n\n---\n\n2. usecase 로 전달된 소스의 행위를 검증한다\nExample \n\n```java\n@RequiredArgsConstructor\n@Component\n@Slf4j\npublic class CreateReceipt {\n    private final ReceiptRepository receiptRepository;\n    private final FindStore findStore;\n\n    private final KlassStoreRepository klassStoreRepository;\n\n    @Transactional\n    public CreateReceiptResult call(CreateReceiptCommand createReceiptCommand) {\n        Optional<KlassStore> storeOptional = klassStoreRepository.findById(createReceiptCommand.getStoreId());\n        if (storeOptional.isEmpty()) {\n            return null;\n        }\n        Store store = storeOptional.get();\n        try {\n            return new CreateReceiptResult(this.receiptRepository.save(\n                    Receipt.builder()\n                            .currency(store.getCurrency())\n                            .receiptMonth(createReceiptCommand.getReceiptMonth())\n                            .taxPayerType(store.getTaxPayerType())\n                            .storeType(createReceiptCommand.getStoreType())\n                            .storeId(store.getId().toHexString())\n                            .withholdingTaxRatio(store.getWithholdingTaxRatio())\n                            .build()\n                ).getReceiptToken()\n            );\n        } catch (NullPointerException e) {\n            log.warn(\"{}: store {} 의 TransferInfo 가 존재하지 않습니다\", store.getId(), store.getName());\n            return null;\n        }\n    }\n}\n```\n\nResult \n \n----\nReceipt Test Case:\n\n\\t Create Receipt\n\\t\\tReceipt 를 생성할 수 있다.\n\\t\\t 정상적으로 생성된다\n\\t\\t\\t Receipt 의 store 정보가 정상적이지 않을 때\n\\t\\t\\t\\t store 의 transferInfo 가 없으면 null 이 반환된다\n\\t\\t\\t\\t store 가 없으면 null 이 "    }
{"role": "user", "content": "반환된다\n\n----\n\n3. Command, Query 로 전달된 경우에는 Java Annotation 을 기반으로 하여 테스트 케이스가 작성된다\n\nExample\n\n```java\n@Builder\n@Value\npublic class CreateReceiptCommand extends SelfValidator<CreateReceiptCommand> {\n    @NotNull\n    String receiptMonth;\n    @NotNull\n    String storeId;\n\n    @NotNull\n    StoreType storeType;\n\n    public CreateReceiptCommand(String receiptMonth, String storeId, StoreType storeType) {\n        this.receiptMonth = receiptMonth;\n        this.storeId = storeId;\n        this.storeType = storeType;\n        this.validateAndIfViolatedThrows();\n    }\n}\n\n```\nResult\n\n---\nReceipt Test Case:\n\n\\t CreateReceiptCommand\n\\t\\t receiptMonth 가 null 이면 에러가 발생한다\n\\t\\t storeId 가 null 이면 에러가 발생한다\n\\t\\t storeType 이 null 이면 에러가 발생한다\n\n---" }